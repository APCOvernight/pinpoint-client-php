<?php
/**
 * FollowMyDriver
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PinPoint
 *
 * APC Overnight PinPoint Service. Locate parcel delivery information based on a consignment number and postcode.
 *
 * OpenAPI spec version: v1
 * Contact: developers@apc-overnight.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FollowMyDriver Class Doc Comment
 *
 * @category Class
 * @description Follow My Driver Information class.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FollowMyDriver implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FollowMyDriver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'last_known_time_stamp' => '\DateTime',
'driver_current_lat' => 'double',
'driver_current_long' => 'double',
'driver_current_stop' => 'int',
'delivery_stop' => 'int',
'delivery_point_lat' => 'double',
'delivery_point_long' => 'double',
'job_time_window_from' => 'AllOfFollowMyDriverJobTimeWindowFrom',
'job_time_window_to' => 'AllOfFollowMyDriverJobTimeWindowTo'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'last_known_time_stamp' => 'date-time',
'driver_current_lat' => 'double',
'driver_current_long' => 'double',
'driver_current_stop' => 'int32',
'delivery_stop' => 'int32',
'delivery_point_lat' => 'double',
'delivery_point_long' => 'double',
'job_time_window_from' => null,
'job_time_window_to' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_known_time_stamp' => 'lastKnownTimeStamp',
'driver_current_lat' => 'driverCurrentLat',
'driver_current_long' => 'driverCurrentLong',
'driver_current_stop' => 'driverCurrentStop',
'delivery_stop' => 'deliveryStop',
'delivery_point_lat' => 'deliveryPointLat',
'delivery_point_long' => 'deliveryPointLong',
'job_time_window_from' => 'jobTimeWindowFrom',
'job_time_window_to' => 'jobTimeWindowTo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_known_time_stamp' => 'setLastKnownTimeStamp',
'driver_current_lat' => 'setDriverCurrentLat',
'driver_current_long' => 'setDriverCurrentLong',
'driver_current_stop' => 'setDriverCurrentStop',
'delivery_stop' => 'setDeliveryStop',
'delivery_point_lat' => 'setDeliveryPointLat',
'delivery_point_long' => 'setDeliveryPointLong',
'job_time_window_from' => 'setJobTimeWindowFrom',
'job_time_window_to' => 'setJobTimeWindowTo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_known_time_stamp' => 'getLastKnownTimeStamp',
'driver_current_lat' => 'getDriverCurrentLat',
'driver_current_long' => 'getDriverCurrentLong',
'driver_current_stop' => 'getDriverCurrentStop',
'delivery_stop' => 'getDeliveryStop',
'delivery_point_lat' => 'getDeliveryPointLat',
'delivery_point_long' => 'getDeliveryPointLong',
'job_time_window_from' => 'getJobTimeWindowFrom',
'job_time_window_to' => 'getJobTimeWindowTo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['last_known_time_stamp'] = isset($data['last_known_time_stamp']) ? $data['last_known_time_stamp'] : null;
        $this->container['driver_current_lat'] = isset($data['driver_current_lat']) ? $data['driver_current_lat'] : null;
        $this->container['driver_current_long'] = isset($data['driver_current_long']) ? $data['driver_current_long'] : null;
        $this->container['driver_current_stop'] = isset($data['driver_current_stop']) ? $data['driver_current_stop'] : null;
        $this->container['delivery_stop'] = isset($data['delivery_stop']) ? $data['delivery_stop'] : null;
        $this->container['delivery_point_lat'] = isset($data['delivery_point_lat']) ? $data['delivery_point_lat'] : null;
        $this->container['delivery_point_long'] = isset($data['delivery_point_long']) ? $data['delivery_point_long'] : null;
        $this->container['job_time_window_from'] = isset($data['job_time_window_from']) ? $data['job_time_window_from'] : null;
        $this->container['job_time_window_to'] = isset($data['job_time_window_to']) ? $data['job_time_window_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_known_time_stamp
     *
     * @return \DateTime
     */
    public function getLastKnownTimeStamp()
    {
        return $this->container['last_known_time_stamp'];
    }

    /**
     * Sets last_known_time_stamp
     *
     * @param \DateTime $last_known_time_stamp Date the location of the driver was last known
     *
     * @return $this
     */
    public function setLastKnownTimeStamp($last_known_time_stamp)
    {
        $this->container['last_known_time_stamp'] = $last_known_time_stamp;

        return $this;
    }

    /**
     * Gets driver_current_lat
     *
     * @return double
     */
    public function getDriverCurrentLat()
    {
        return $this->container['driver_current_lat'];
    }

    /**
     * Sets driver_current_lat
     *
     * @param double $driver_current_lat Driver's Latitude
     *
     * @return $this
     */
    public function setDriverCurrentLat($driver_current_lat)
    {
        $this->container['driver_current_lat'] = $driver_current_lat;

        return $this;
    }

    /**
     * Gets driver_current_long
     *
     * @return double
     */
    public function getDriverCurrentLong()
    {
        return $this->container['driver_current_long'];
    }

    /**
     * Sets driver_current_long
     *
     * @param double $driver_current_long Driver's Longitude
     *
     * @return $this
     */
    public function setDriverCurrentLong($driver_current_long)
    {
        $this->container['driver_current_long'] = $driver_current_long;

        return $this;
    }

    /**
     * Gets driver_current_stop
     *
     * @return int
     */
    public function getDriverCurrentStop()
    {
        return $this->container['driver_current_stop'];
    }

    /**
     * Sets driver_current_stop
     *
     * @param int $driver_current_stop Driver's current stop number
     *
     * @return $this
     */
    public function setDriverCurrentStop($driver_current_stop)
    {
        $this->container['driver_current_stop'] = $driver_current_stop;

        return $this;
    }

    /**
     * Gets delivery_stop
     *
     * @return int
     */
    public function getDeliveryStop()
    {
        return $this->container['delivery_stop'];
    }

    /**
     * Sets delivery_stop
     *
     * @param int $delivery_stop Delivery stop number
     *
     * @return $this
     */
    public function setDeliveryStop($delivery_stop)
    {
        $this->container['delivery_stop'] = $delivery_stop;

        return $this;
    }

    /**
     * Gets delivery_point_lat
     *
     * @return double
     */
    public function getDeliveryPointLat()
    {
        return $this->container['delivery_point_lat'];
    }

    /**
     * Sets delivery_point_lat
     *
     * @param double $delivery_point_lat Delivery point Latitude
     *
     * @return $this
     */
    public function setDeliveryPointLat($delivery_point_lat)
    {
        $this->container['delivery_point_lat'] = $delivery_point_lat;

        return $this;
    }

    /**
     * Gets delivery_point_long
     *
     * @return double
     */
    public function getDeliveryPointLong()
    {
        return $this->container['delivery_point_long'];
    }

    /**
     * Sets delivery_point_long
     *
     * @param double $delivery_point_long Delivery pointLongitude
     *
     * @return $this
     */
    public function setDeliveryPointLong($delivery_point_long)
    {
        $this->container['delivery_point_long'] = $delivery_point_long;

        return $this;
    }

    /**
     * Gets job_time_window_from
     *
     * @return AllOfFollowMyDriverJobTimeWindowFrom
     */
    public function getJobTimeWindowFrom()
    {
        return $this->container['job_time_window_from'];
    }

    /**
     * Sets job_time_window_from
     *
     * @param AllOfFollowMyDriverJobTimeWindowFrom $job_time_window_from Job Time Window Start
     *
     * @return $this
     */
    public function setJobTimeWindowFrom($job_time_window_from)
    {
        $this->container['job_time_window_from'] = $job_time_window_from;

        return $this;
    }

    /**
     * Gets job_time_window_to
     *
     * @return AllOfFollowMyDriverJobTimeWindowTo
     */
    public function getJobTimeWindowTo()
    {
        return $this->container['job_time_window_to'];
    }

    /**
     * Sets job_time_window_to
     *
     * @param AllOfFollowMyDriverJobTimeWindowTo $job_time_window_to job_time_window_to
     *
     * @return $this
     */
    public function setJobTimeWindowTo($job_time_window_to)
    {
        $this->container['job_time_window_to'] = $job_time_window_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
